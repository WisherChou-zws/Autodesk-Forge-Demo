{"version":3,"sources":["webpack://Autodesk.Extensions.[name]/webpack/bootstrap","webpack://Autodesk.Extensions.[name]/./extensions/OMV/OMVPanel.js","webpack://Autodesk.Extensions.[name]/./extensions/OMV/OMVLocales.js","webpack://Autodesk.Extensions.[name]/./extensions/OMV/OMV.js","webpack://Autodesk.Extensions.[name]/./extensions/OMV/ConfettiController.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","TAB_ID","OMVPanel","viewer","confettiController","title","PANEL_ID","id","Autodesk","Viewing","UI","SettingsPanel","this","container","heightAdjustment","classList","add","_onSetConfettiDiameter","addTab","className","selectTab","inspectionSettingsLabel","addLabel","sliderId","addSlider","confettiSizeSlider","getControl","sliderElement","step","stepperElement","createFooter","constructor","syncUI","setValue","diameter","event","new_diameter","typeOfEvent","_typeof","detail","parseFloat","resizeConfetti","locales","en","cs","de","es","fr","fr-CA","it","ja","ko","pl","pt-BR","ru","tr","zh-HANS","zh-HANT","nl","sv","da","__webpack_exports__","OMV","options","Extension","_configButtonId","_default_geom_diameter","undefined","_panel","hasUI","GuiViewer3D","openPanel","_initialiseConfetti","_initButtonConfig","load","extendLocalization","model","isLoadDone","addEventListener","GEOMETRY_LOADED_EVENT","once","unload","removeEventListener","viewerSettingsPanel","removeConfigButton","uninitialize","_this","_controller","getDiameterFromFrag","fragId","vb","getFragmentList","getGeometry","center","getConfettiCenter","on_circle","THREE","Vector3","distanceTo","toFixed","setFragmentDiameter","fragProxy","impl","getFragmentProxy","getAnimTransform","scale","worldInv","Matrix4","getOriginalWorldMatrix","getInverse","confetti_center","position","x","elements","y","z","updateAnimTransform","newDiameter","instanceTree","getData","findMeasuredPoints","dbIdArray","length","enumNodeFragments","sceneUpdated","getDiameterFromGeom","gotDiameter","onGetMeasuredPoints","findInspectionPoints","propFilter","ignoreHidden","getBulkProperties","results","measuredPoints","filter","result","properties","propertyName","displayName","displayValue","getPropertyValue","onGetInspectionPoints","findProperty","then","geom_diameter","setConfettiDiameter","setVisible","settingsPanel","getSettingsPanel","addConfigButton","av","TOOLBAR_CREATED_EVENT","theExtensionManager","registerExtension"],"mappings":"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","file":"OMV/OMV.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 371);\n","\n'use strict';\n\n\nconst TAB_ID = 'configTab';\nconst TAB_LABEL = 'Probing';\nconst INSPECTION_POINTS_LABEL = 'Inspection Points';\nconst SLIDER_LABEL = 'Confetti diameter';\n\nconst SLIDER_MIN_VALUE = 0.5;\nconst SLIDER_MAX_VALUE = 40;\nconst SLIDER_INIT_VALUE = 1;\nconst SLIDER_STEP_VALUE = 0.1;\n\n/**\n * Panel with UI to configure the On-Machine Verification (OMV) extension.\n * \n * @memberof Autodesk.Viewing.Extensions.OMV\n * @alias Autodesk.Viewing.Extensions.OMV.OMVPanel\n * @extends {Autodesk.Viewing.UI.SettingsPanel}\n * @constructor\n*/\nexport var OMVPanel = function (viewer, confettiController, title) {\n\n    const PANEL_ID = 'adsk_omv_panel_' + viewer.id;\n    const opts = { heightAdjustment: 90 };\n    Autodesk.Viewing.UI.SettingsPanel.call(this, viewer.container, PANEL_ID, title, opts);\n    this.container.classList.add('viewer-settings-panel');\n\n    this.viewer = viewer;\n    this.confettiController = confettiController;\n    this._onSetConfettiDiameter = this._onSetConfettiDiameter.bind(this);\n    \n    // Add a default tab called Configuration\n    this.addTab(TAB_ID, TAB_LABEL, { className: 'config' });\n    this.selectTab(TAB_ID);\n\n    // Add the Inspection Points settings\n    this.inspectionSettingsLabel = this.addLabel(TAB_ID, INSPECTION_POINTS_LABEL);\n    // Add a slider for confetti diameter\n    this.sliderId = this.addSlider( TAB_ID, SLIDER_LABEL,\n        SLIDER_MIN_VALUE, SLIDER_MAX_VALUE, SLIDER_INIT_VALUE,\n        this._onSetConfettiDiameter\n    );\n    this.confettiSizeSlider = this.getControl(this.sliderId);\n    this.confettiSizeSlider.sliderElement.step = this.confettiSizeSlider.stepperElement.step = SLIDER_STEP_VALUE;\n\n    this.createFooter();\n};\n\n\nOMVPanel.prototype = Object.create(Autodesk.Viewing.UI.SettingsPanel.prototype);\nOMVPanel.prototype.constructor = OMVPanel;\n\n/**\n * Syncronize UI controls with confetti controller data.\n */\nOMVPanel.prototype.syncUI = function() {\n    this.confettiSizeSlider.setValue(this.confettiController.diameter);\n};\n\n/**\n * When the diameter has been changed\n * @param event The event that caused the confetti size to change. Either an object or a number.\n * @private\n */\nOMVPanel.prototype._onSetConfettiDiameter = function(event) {\n    var new_diameter = null;\n    // We can have two types of input\n    // 1. An event from the slider control\n    // 2. The actual value that the preference was changed to\n    var typeOfEvent = typeof event;\n    if (typeOfEvent === 'object' && event.detail && event.detail.value) {\n        new_diameter = parseFloat(event.detail.value);\n    } else if (typeOfEvent === 'number') {\n        new_diameter = event;\n    }\n    if (!new_diameter) {\n        return;\n    }\n\n    this.confettiController.resizeConfetti(new_diameter);\n    // No need to syncUI() when event comes from UI...\n};\n\n","/**\n * Include each locale json file and return it in an object\n * that can be consumed by i18n\n */\n\nimport json_en from '../../res/locales/en/nobundle-omv.loc.json';\nimport json_cs from '../../res/locales/cs/nobundle-omv.loc.json';\nimport json_de from '../../res/locales/de/nobundle-omv.loc.json';\nimport json_es from '../../res/locales/es/nobundle-omv.loc.json';\nimport json_fr from '../../res/locales/fr/nobundle-omv.loc.json';\nimport json_fr_CA from '../../res/locales/fr-CA/nobundle-omv.loc.json';\nimport json_it from '../../res/locales/it/nobundle-omv.loc.json';\nimport json_ja from '../../res/locales/ja/nobundle-omv.loc.json';\nimport json_ko from '../../res/locales/ko/nobundle-omv.loc.json';\nimport json_pl from '../../res/locales/pl/nobundle-omv.loc.json';\nimport json_pt_BR from '../../res/locales/pt-BR/nobundle-omv.loc.json';\nimport json_ru from '../../res/locales/ru/nobundle-omv.loc.json';\nimport json_tr from '../../res/locales/tr/nobundle-omv.loc.json';\nimport json_zh_HANS from '../../res/locales/zh-HANS/nobundle-omv.loc.json';\nimport json_zh_HANT from '../../res/locales/zh-HANT/nobundle-omv.loc.json';\nimport json_nl from '../../res/locales/nl/nobundle-omv.loc.json';\nimport json_sv from '../../res/locales/sv/nobundle-omv.loc.json';\nimport json_da from '../../res/locales/da/nobundle-omv.loc.json';\n\nexport const locales = {\n    en: json_en,\n    cs: json_cs,\n    de: json_de,\n    es: json_es,\n    fr: json_fr,\n    \"fr-CA\": json_fr_CA,\n    it: json_it,\n    ja: json_ja,\n    ko: json_ko,\n    pl: json_pl,\n    \"pt-BR\": json_pt_BR,\n    ru: json_ru,\n    tr: json_tr,\n    \"zh-HANS\": json_zh_HANS,\n    \"zh-HANT\": json_zh_HANT,\n    nl: json_nl,\n    sv: json_sv,\n    da: json_da,\n};\n\n","import { ConfettiController } from './ConfettiController'\nimport { OMVPanel } from './OMVPanel'\nimport { locales } from './OMVLocales'\n\nconst SETTINGS_BUTTON_LABEL = 'On-Machine Verification';\n\n'use strict';\n\n/**\n * Provides UI controls for OMV settings\n * \n * The extension id is: `Autodesk.OMV`\n * \n * @example\n *   viewer.loadExtension('Autodesk.OMV')\n * \n * @memberof Autodesk.Viewing.Extensions.OMV\n * @alias Autodesk.Viewing.Extensions.OMV.OMV\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @constructor\n*/\nexport function OMV(viewer, options) {\n\n    Autodesk.Viewing.Extension.call(this, viewer, options);\n    this._configButtonId = null;\n    this._default_geom_diameter = undefined;\n    this._panel = null;\n    this.confettiController = null;\n    this.hasUI = Autodesk.Viewing.GuiViewer3D && viewer instanceof Autodesk.Viewing.GuiViewer3D;\n    this.openPanel = this.openPanel.bind(this);\n    this._initialiseConfetti = this._initialiseConfetti.bind(this);\n    this._initButtonConfig = this._initButtonConfig.bind(this);\n};\n\nOMV.prototype = Object.create(Autodesk.Viewing.Extension.prototype);\nOMV.prototype.constructor = OMV;\n\n/**\n * Load the OMV extension.\n * It will fail to load when running a headless viewer.\n */\nOMV.prototype.load = function () {\n    // Don't do anything if there is no UI\n    if (!this.hasUI) {\n        return false;\n    }\n\n    this.extendLocalization(locales);\n\n    if (this.viewer.model && this.viewer.model.isLoadDone()) {\n        this._initialiseConfetti();\n    } else {\n        // Add an one time listener for the geometry loaded event\n        this.viewer.addEventListener(\n            Autodesk.Viewing.GEOMETRY_LOADED_EVENT, \n            this._initialiseConfetti, \n            { once: true }\n        );\n    }\n\n    return true;\n};\n\n/**\n * Unload the OMV extension.\n*/\nOMV.prototype.unload = function () {\n\n    // Remove the listener in case we unload the extension before the geometry has been loaded\n    this.viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, this._initialiseConfetti);\n    \n    if (this._configButtonId !== null) {\n        this.viewer.viewerSettingsPanel.removeConfigButton(this._configButtonId);\n        this._configButtonId = null;   \n    }\n\n    if (this._panel) {\n        this._panel.uninitialize();\n        this._panel = null;\n    }\n\n    this.confettiController = null;\n    return true;\n};\n\n/**\n * @private\n */\nOMV.prototype._initialiseConfetti = function() {\n\n    this.confettiController = new ConfettiController(this.viewer);\n\n    // Get the initial diameter from the geometry of the confetti\n    this.confettiController.getDiameterFromGeom((geom_diameter) => {\n        \n        // Abort if the extension got unloaded before it fully initialized the UI.\n        if (!this.viewer)\n            return;\n\n        this._default_geom_diameter = geom_diameter;\n        this.setConfettiDiameter(geom_diameter);\n        this._initButtonConfig();\n    });\n\n    \n};\n\n/**\n * Change the confetti diameter.\n * @param {number} [diameter] - Confetti diameter. Use `undefined` to set model's default value.\n * @returns {boolean} true is the confetti value has changed.\n */\nOMV.prototype.setConfettiDiameter = function(diameter) {\n\n    // When no diameter is passed, use the default one from the model.\n    if (diameter === undefined) {\n        diameter = this._default_geom_diameter;\n    }\n\n    if (diameter === undefined) {\n        // Model has no default confeti diamter specified, abort.\n        return false;\n    }\n\n    this.confettiController.resizeConfetti(diameter);\n    this._panel && this._panel.syncUI();\n    return true;\n}\n\n\n/**\n * Opens the OMV configuration panel.\n */\nOMV.prototype.openPanel = function() {\n    if (!this._panel) {\n        this._panel = new OMVPanel(this.viewer, this.confettiController, SETTINGS_BUTTON_LABEL);\n    }\n    this._panel.setVisible(true);\n}\n\n/**\n * Adds a button to the Settings Panel.\n * @private\n */\nOMV.prototype._initButtonConfig = function() {\n    \n    var settingsPanel = this.viewer.getSettingsPanel();\n    if (!settingsPanel) {\n        this.addEventListener(av.TOOLBAR_CREATED_EVENT, this._initButtonConfig, {once: true});\n        return;\n    }\n\n    this._configButtonId = settingsPanel.addConfigButton(SETTINGS_BUTTON_LABEL, this.openPanel);\n}\n\nAutodesk.Viewing.theExtensionManager.registerExtension('Autodesk.OMV', OMV);\n\n","\n'use strict';\n\nvar surfaceInspectionProperty = 'Surface Inspection Point';\nvar measuredPointLabel = 'projected';\n\n/**\n * Controller for the confetti\n * \n * @memberof Autodesk.Viewing.Extensions.OMV\n * @alias Autodesk.Viewing.Extensions.OMV.ConfettiController\n * @constructor\n*/\nexport var ConfettiController = function (viewer) {\n\n    var _controller = this;\n    this.viewer = viewer;\n    this.diameter = null;\n\n    /**\n     * Resize the confetti to the given diameter.\n     * @param {number} newDiameter The diameter to resize the confetti to.\n    */\n    this.resizeConfetti = function (newDiameter) {\n        if (newDiameter === this.diameter) {\n            return;\n        }\n        var viewer = this.viewer;\n        var instanceTree = viewer.model.getData().instanceTree;\n        this.diameter = newDiameter;\n\n        this.findMeasuredPoints(function(dbIdArray) {\n            for (var i = 0; i < dbIdArray.length; i++) {\n                instanceTree.enumNodeFragments(dbIdArray[i], function(fragId) {\n                    setFragmentDiameter(fragId, newDiameter);\n                    // If we just resized the last confetti, update the view    \n                    if (i === dbIdArray.length - 1) {\n                        // Update the scene\n                        viewer.impl.sceneUpdated(true);        \n                    }\n                }, false);\n            }\n        });\n    };\n\n    /**\n     * Get the current diameter from the geometry of the confetti\n     * @param {function} gotDiameter The callback with the diameter as the argument.\n     * \n    */\n    this.getDiameterFromGeom = function(gotDiameter) {\n        var viewer = this.viewer;\n        var instanceTree = viewer.model.getData().instanceTree;\n        var load_done = viewer.model.isLoadDone();\n\n        this.findMeasuredPoints(function(dbIdArray) {\n            instanceTree.enumNodeFragments(dbIdArray[0], function(fragId) {\n                var diameter = getDiameterFromFrag(fragId);\n                gotDiameter(diameter);\n            }, false);\n        });\n    };\n\n    /**\n     * Find the measured points.\n     * @param {function} onGetMeasuredPoints The callback with the measured points as an array argument.\n    */\n    this.findMeasuredPoints = function(onGetMeasuredPoints) {\n        var viewer = this.viewer;\n        this.findInspectionPoints(function(dbIdArray) {\n            var options = {propFilter: [surfaceInspectionProperty], ignoreHidden: false};\n            viewer.model.getBulkProperties(dbIdArray, options, function(results) {\n                var measuredPoints = results.filter(function(result) {\n                    var propValue = getPropertyValue(result.properties, surfaceInspectionProperty);\n                    return propValue === measuredPointLabel;\n                });\n                onGetMeasuredPoints(measuredPoints);\n            });\n        });\n    };\n\n    /**\n     * Find inspection points\n     * @param {function} onGetInspectionPoints The callback with the IDs of the inspection points.\n    */\n    this.findInspectionPoints = function(onGetInspectionPoints) {\n        this.viewer.model.findProperty(surfaceInspectionProperty).then(function(dbIdArray) {\n            onGetInspectionPoints(dbIdArray);\n        });\n    };\n\n    /**\n     * Get the diameter from the given fragment\n     * @param fragId The fragment ID of the confetti to get the diameter of.\n     * @returns {number} The diameter of the confetti\n     * @private\n    */\n    function getDiameterFromFrag(fragId) {\n        var viewer = _controller.viewer;\n\n        // Get the diameter of the geometry\n        var geometry = viewer.model.getFragmentList().getGeometry(fragId);\n        var vb = geometry.vb;\n        var center = getConfettiCenter(fragId);\n        var on_circle = new THREE.Vector3(vb[3], vb[4], vb[5]);\n        var diameter = 2 * center.distanceTo(on_circle);\n        return parseFloat(diameter.toFixed(1));\n    };\n\n    /**\n     * Get the center of the confetti\n     * @param fragId The fragment ID of the confetti to get the center of.\n     * @returns {THREE.Vector3} The center point of the confetti\n     * @private\n    */\n    function getConfettiCenter(fragId) {\n        var geometry = _controller.viewer.model.getFragmentList().getGeometry(fragId);\n        var vb = geometry.vb;\n        return new THREE.Vector3(vb[0], vb[1], vb[2]);\n    };\n\n    /**\n     * Set the diameter of the given fragment confetti. \n     * This applies a transformation to scale the geometry, so we can achieve\n     * the diameter we want.\n     * @param fragId The fragment ID of the confetti to resize to the new diameter.\n     * @param diameter THe diameter to resize the confetti to.\n     * @private\n    */\n    function setFragmentDiameter(fragId, diameter) {\n        var viewer = _controller.viewer;\n        var fragProxy = viewer.impl.getFragmentProxy(\n            viewer.model,\n            fragId\n        );\n        fragProxy.getAnimTransform();\n        \n        // Get the diameter of the geometry\n        var geom_diameter = getDiameterFromFrag(fragId);\n        // Calculate the scale we need to have in order to simulate the new diameter\n        var scale = diameter / geom_diameter;\n\n        // get inverse of world matrix\n        var worldInv = new THREE.Matrix4();\n        fragProxy.getOriginalWorldMatrix(worldInv);\n        worldInv.getInverse(worldInv);\n        var confetti_center = getConfettiCenter(fragId);\n\n        // Set the scale we need in order to achieve the diameter we want\n        fragProxy.scale = new THREE.Vector3(scale, scale, scale);\n\n        // Move the position of the fragment, so it will stay in the same place after the scaling\n        fragProxy.position.x = worldInv.elements[12] * (scale - 1) - confetti_center.x * (scale - 1);\n        fragProxy.position.y = worldInv.elements[13] * (scale - 1) - confetti_center.y * (scale - 1);\n        fragProxy.position.z = worldInv.elements[14] * (scale - 1) - confetti_center.z * (scale - 1);\n\n        fragProxy.updateAnimTransform();\n    };\n\n    /**\n     * Get the value of the property that matches the given name\n     * @param properties The array of properties to search in.\n     * * @param propertyName The name of the property we want to find the value of.\n     * @returns The value of the requested property. If it doesn't exist, return null.\n     * @private\n    */\n    function getPropertyValue(properties, propertyName){\n        for(var i = 0; i < properties.length; ++i) {\n            var property = properties[i];\n            if(property.displayName === propertyName) {\n                return property.displayValue;\n            }\n        }\n        return null;\n    }    \n};\n\n"],"sourceRoot":""}